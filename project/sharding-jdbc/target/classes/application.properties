server.port=6666

spring.application.name = sharding-jdbc-test

spring.http.encoding.enabled = true
spring.http.encoding.charset = UTF-8
spring.http.encoding.force = true

spring.main.allow-bean-definition-overriding = true

mybatis.configuration.map-underscore-to-camel-case = true

#sharding-jdbc分片规则配置
#数据源
spring.shardingsphere.datasource.names = m1,m2,m3,u1,u2

spring.shardingsphere.datasource.u1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.u1.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.u1.url = jdbc:mysql://localhost:3306/user_db?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.u1.username = root
spring.shardingsphere.datasource.u1.password = 123456

spring.shardingsphere.datasource.u2.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.u2.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.u2.url = jdbc:mysql://localhost:3307/user_db?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.u2.username = root
spring.shardingsphere.datasource.u2.password = 123456

spring.shardingsphere.datasource.m1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url = jdbc:mysql://localhost:3306/order_db1?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.m1.username = root
spring.shardingsphere.datasource.m1.password = 123456

spring.shardingsphere.datasource.m2.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.url = jdbc:mysql://localhost:3306/order_db2?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.m2.username = root
spring.shardingsphere.datasource.m2.password = 123456

spring.shardingsphere.datasource.m3.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m3.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m3.url = jdbc:mysql://localhost:3306/order_db3?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.m3.username = root
spring.shardingsphere.datasource.m3.password = 123456

# 主库从库逻辑数据源定义
spring.shardingsphere.sharding.master‐slave‐rules.ds0.master-data-source-name=u1
spring.shardingsphere.sharding.master‐slave‐rules.ds0.slave-data-source-names[]=u2

# 分库策略，以user_id为分片键，分片策略为user_id % 2 + 1，user_id为偶数操作m1数据源，否则操作m2。
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column = user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression = m$->{user_id % 3 + 1}

# 指定t_order表的数据分布情况，配置数据节点 m1.t_order_1,m1.t_order_2
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes = m$->{1..3}.t_order$->{1..2}
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes = ds0.t_user

# 指定t_order表的主键生成策略为SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order.key-generator.column=id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

# 指定t_order表的分片策略，分片策略包括分片键和分片算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column = id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression = t_order$->{id % 2 + 1}

spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column = user_id
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression = t_user

# 指定t_dict为公共表
spring.shardingsphere.sharding.broadcast-tables=t_dict
# 打开sql输出日志
spring.shardingsphere.props.sql.show = true


